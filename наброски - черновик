# Домашнее задание, Условия задачи:
print("Задание 2: Дан текст: в первой строке задано число строк, далее идут сами строки.\nВыведите слово, которое в этом тексте "
      "встречается чаще всего.\nЕсли таких слов несколько, выведите то, которое меньше в лексикографическом порядке. "
      "Слово которое первое повторилось.\n")
# print("Чтобы вставить готовый текст, введите - 1\nЕсли желаете ввести текст вручную, введите - 2")
# g1 = int(input("Введите 1 или 2 : "))
# if g1 == 1: # вставляем готовые строки
#         stroka_1 = "Dog? stop! dog. caT.", "Cat, mat, mog. Cat smog?", "top gop top top", "Просто текст! Тут же может быть, просто текст?"
#         print("Наша строка: \n")
#         for q1 in range(len(stroka_1)): # Пусть для примера будет 4 строки
#                 print(f"{q1 + 1}. {stroka_1[q1]}")  # выводим исходный результат
# else: # пользователь сам выбирает сколько и каких строк будет
#     N = int(input("Введите кол-во строк:"))
#     stroka_1 = "" # Создаем пустую строку #[] # Создаем пустой список для рядов ( set1 = )
#     for cikl_1 in range(N): # Создаем столько строк, сколько указал пользователь
#         set1 = input("Введите строку: ") # Вписываем содержимое строки
#         stroka_1 += set1 + "\t"# сохраняем полученные множества в список для дальнейших действий
#         # Тк цикл начинается с 0, добавим +1 для удобного отображения порядкового номера
#         print(cikl_1 + 1, ".", set1) # Выводим полученные строки.
#
stroka_1 = "" # Все введенные строки хранятся в одной строке
for cikl_1 in range(2): # Создаем столько строк, сколько указал пользователь например 2
        set1 = "эТо  Это Пример!" # Вписываем содержимое строки # input("Введите строку: ")
        stroka_1 += set1 + "\t"# сохраняем полученные строки в 1 строку
        # Тк цикл начинается с 0, добавим +1 для удобного отображения порядкового номера
        print("stroka",cikl_1+1,  set1) # печатаем столько строк, сколько указано пользователем

print("\nПроцесс выполнения задания по шагам:\n")
#Все введенные ранее строки хранятся в одной строке в переменной stroka_1
print("Шаг_1: Предлагаем пользователю ввести сколько и каких строк будет: ", stroka_1) # Введенные строки
# делаем буквы одного регистра и сохраняем в переменную stroka_2
stroka_2 = stroka_1.lower()  # Меняем все на строчный регистр
print("Шаг_2: Делаем все символы одного регистра: ", stroka_2) # Смотрим результат 2 шага
stroka_3 = stroka_2.split("\t") # Разбиваем строку, для дальнейшей работы по индексам

# Так может не нужно разбивать строку? у нас метка строк стоит, главное ее не потерять при чистке символов
# для этого надо прописать символ деления строк к условию

print("stroka_3: Разделенные строки друг от друга:", stroka_3)
# мы отделили строки друг от друга, теперь делим сами строки по порядку (Делаем матрицу из строк)
print("stroka_4: ")
stroka_4 = list() # создаем пустой список, для сохранения слов без символов
# stroka_5 =  запасной план list() #  хотя пусть это будет строка 4
alfavit = "abcdefghijklmnopqrstuvwxyz"  # английский алфавит
rus_alfavit = "абвгдеёжзийклмнопрстуфхцчшщъыьэюя"  # русский алфавит
set3 = ""  # создаем пустую строку, для сохранения слов без символов

#  # # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! сверху все гуд не трогаем!!!!

# надо делать циклы так, чтобы не сохранятьсписки, тк нам делать еще поиск повторений и убирать символы
# надо вместо сохранения списка сохранять переменную, тк после цикла она уже не нужна
for cikl_2 in range(len(stroka_3)):# создаем цикл для деления списка на предложения-строки (далее на слова потом на буквы)
        set2 = stroka_3[cikl_2].split()
        # stroka_4.append(set2)
# print("stroka_4: Разделение слов в строке: ", stroka_4)
        print(f"          {cikl_2 + 1}-я строка: {stroka_4[cikl_2]}")
        for cikl_3 in range(len(stroka_4[cikl_2])): # создаем цикл для деления предложений на слова
                print(f"{cikl_3 + 1}-е слово: {stroka_4[cikl_2][cikl_3]}")
                for cikl_4 in stroka_4[cikl_2][cikl_3]: # создаем цикл для деления слов на буквы
                        print(f"{stroka_4[cikl_2][cikl_3].index(cikl_4) + 1}-я буква: {cikl_4}")
                        # # Теперь нужно почистить строки от лишних символов



                        # перебор букв закончен, теперь сюда же вставляем цикл перебора букв алфавита и сохраняем букву если такая есть в алфавите

                        for cikl_5 in rus_alfavit:  # перебираем буквы русского алфавита
                                if cikl_4 == cikl_5: # создаем условие: находим в нашем списке только русские буквы
                                        set3 += cikl_4 # сохраняем русские буквы в новую строку
                        for cikl_6 in alfavit: # перебираем буквы английского алфавита
                                if cikl_4 == cikl_6: # создаем условие: находим в нашем списке только английские буквы
                                        set3 += cikl_4 # сохраняем английские буквы в новую строку
                set3 += " " # после слова вставляем пробел
        stroka_4.append(set3) # тут был set2
        # stroka_5.append(stroka_4)  # когда строка закончилась, сохряняем ее в список, да бы не поплыла нумирация
print("stroka_4: без лишних символов", stroka_4) # Выводим чистую строку (без символов)


# split_2 =
# a2 = []  # создаем пустой список для повторяющихся слов
# # проверим нашу строку на дубляж символов
# # for i7 in range(len(set(split_2))):
# for i6 in range(len(split_2)): # прогон букв по индексу из строки
#         a1.append(split_2[i6]) # добавляем поочередно элементы списка
#         k1 = a1.count(split_2[i6]) # создаем переменную для поиска дубляжа: 1-слово не повторяется, 2 и более-повторяется
#     # print(a1)
#         if k1 == 1:
#             print(f"{i6+1}. Слово \" {split_2[i6]} \"  - не повторяется")
#         elif k1 == 2: # создаем условие, при нахождении дубляжа
#             a1.pop()
#             a2.append(i6) # перемещаем повторяющиеся слова в другой список
#             print(f"{i6+1}. Cлово \" {split_2[i6]} \" - Повторяется {split_2.count(split_2[i6])} раз(а)")


#
